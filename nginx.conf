# nginx.conf

# This resolver is necessary for Nginx to find other Docker containers by name.
# It uses Docker's internal DNS server at 127.0.0.11.
resolver 127.0.0.11 valid=5s;

server {
    listen 3000;
    # This will match requests for any hostname (e.g., localhost)
    server_name _;

    # WebSocket endpoint - needs special handling
    location = /api/live/ws {
        proxy_pass http://grafana:3000/api/live/ws;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        
        # WebSocket timeout settings
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }

    # All requests go through this location, but auth is only checked for POST to /api/*
    location / {
        access_by_lua_block {
            local matches = string.match(ngx.var.uri, "^/api/plugins/grafana%-oncall%-app/")
            local is_get_or_options = ngx.var.request_method == "GET" or ngx.var.request_method == "OPTIONS"

            if matches and not is_get_or_options then
                -- Log the incoming request details
                ngx.log(ngx.ERR, "Auth check triggered for: ", ngx.var.request_method, " ", ngx.var.uri)
                ngx.log(ngx.ERR, "Original cookie: ", ngx.var.http_cookie or "none")
                
                -- Read the original request body
                ngx.req.read_body()
                local original_body = ngx.req.get_body_data() or ""
                
                -- Make internal auth request
                local res = ngx.location.capture("/_auth", {
                    method = ngx.HTTP_GET,
                    args = "",
                    always_forward_body = false,
                    copy_all_vars = false,
                    copy_all_vars_if_subrequest = false,
                    headers = {
                        ["X-Original-URI"] = ngx.var.uri,
                        ["X-Original-Method"] = ngx.var.request_method,
                        ["X-Original-Body"] = original_body
                    }
                })
                
                if res.status ~= ngx.HTTP_OK then
                    ngx.log(ngx.ERR, "Auth failed with status: ", res.status)
                    ngx.exit(res.status)
                end
                
                ngx.log(ngx.ERR, "Auth successful for: ", ngx.var.request_method, " ", ngx.var.uri)
            end
        }
        
        # Proxy all requests to Grafana
        proxy_pass http://grafana:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Internal-only location for running our authentication logic
    location = /_auth {
        internal; # Can only be accessed by other Nginx locations

        content_by_lua_block {
            local cjson = require "cjson"

            -- Get the cookie from the original request headers
            local cookie = ngx.var.http_cookie
            ngx.log(ngx.ERR, "_auth: Received cookie: ", cookie or "none")
            
            if not cookie or cookie == "" then
                ngx.log(ngx.ERR, "Unauthorized: Missing session cookie")
                ngx.exit(ngx.HTTP_UNAUTHORIZED) -- 401
            end

            -- Make a sub-request to our internal proxy location with cookie as custom header
            local res = ngx.location.capture("/_auth_proxy", {
                method = ngx.HTTP_GET,
                args = "",
                always_forward_body = false,
                copy_all_vars = false,
                copy_all_vars_if_subrequest = false,
                headers = {
                    ["X-Original-Cookie"] = cookie
                }
            })

            if not res or res.status ~= ngx.HTTP_OK then
                ngx.log(ngx.ERR, "Unauthorized: Invalid session. Grafana API returned: ", res and res.status or "no response")
                ngx.log(ngx.ERR, "Response body: ", res and res.body or "no body")
                ngx.exit(ngx.HTTP_UNAUTHORIZED) -- 401
            end

            -- Parse the JSON response from Grafana.
            local user, err = cjson.decode(res.body)
            if not user then
                ngx.log(ngx.ERR, "Server Error: Could not decode JSON from Grafana API. ", err)
                ngx.log(ngx.ERR, "Response body: ", res.body)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) -- 500
            end

            ngx.log(ngx.ERR, "Auth check for user: ", user.login, ", Admin: ", tostring(user.isGrafanaAdmin))

            -- ⭐ CUSTOM LOGIC HERE ⭐
            -- Get the original request URI from custom header
            local original_uri = ngx.var.http_x_original_uri
            local original_method = ngx.var.http_x_original_method
            ngx.log(ngx.ERR, "Starting custom auth logic for original URI: ", original_uri or "none", " method: ", original_method or "none")
            
            if not original_uri then
                ngx.log(ngx.ERR, "No original URI provided in auth request")
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            
            -- First check: If user is admin, allow all operations
            if user.isGrafanaAdmin then
                ngx.log(ngx.ERR, "Access granted: User ", user.login, " is Grafana admin, bypassing all checks")
                ngx.exit(ngx.HTTP_OK)
            end
            
            -- Check if this is a shift swap creation request
            local is_shift_swap_request = string.match(original_uri, "^/api/plugins/grafana%-oncall%-app/resources/shift_swaps/?$")
            
            if is_shift_swap_request then
                ngx.log(ngx.ERR, "Detected shift swap request, checking team membership")

                -- Make a sub-request to our internal proxy location with cookie as custom header
                local res = ngx.location.capture("/_oncall_teams_proxy", {
                    method = ngx.HTTP_GET,
                    args = "",
                    always_forward_body = false,
                    copy_all_vars = false,
                    copy_all_vars_if_subrequest = false,
                    headers = {
                        ["X-Original-Cookie"] = cookie
                    }
                })

                -- Parse the JSON response from Grafana.
                if not res or res.status ~= ngx.HTTP_OK then
                    ngx.log(ngx.ERR, "Unauthorized: Invalid session. Grafana API returned: ", res and res.status or "no response")
                    ngx.log(ngx.ERR, "Response body: ", res and res.body or "no body")
                    ngx.exit(ngx.HTTP_UNAUTHORIZED) -- 401
                end

                -- Parse the JSON response from Grafana.
                local teams, err = cjson.decode(res.body)
                if not teams then
                    ngx.log(ngx.ERR, "Server Error: Could not decode JSON from Grafana API. ", err)
                    ngx.log(ngx.ERR, "Response body: ", res.body)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) -- 500
                end

                ngx.log(ngx.ERR, "Teams: ", cjson.encode(teams))
                
                -- Get the original request body from custom header
                local body = ngx.var.http_x_original_body
                if not body or body == "" then
                    ngx.log(ngx.ERR, "No request body found for shift swap request")
                    ngx.exit(ngx.HTTP_BAD_REQUEST) -- 400
                end
                
                ngx.log(ngx.ERR, "Request body: ", body)
                
                -- Parse JSON to get schedule ID
                local request_data, err = cjson.decode(body)
                if not request_data or not request_data.schedule then
                    ngx.log(ngx.ERR, "Invalid request body or missing schedule field: ", err or "no schedule field")
                    ngx.exit(ngx.HTTP_BAD_REQUEST) -- 400
                end
                
                local schedule_id = request_data.schedule
                ngx.log(ngx.ERR, "Extracted schedule ID: ", schedule_id)
                
                -- Make request to get schedule details
                local schedule_res = ngx.location.capture("/_oncall_schedule_proxy", {
                    method = ngx.HTTP_GET,
                    args = "schedule_id=" .. schedule_id,
                    always_forward_body = false,
                    copy_all_vars = false,
                    copy_all_vars_if_subrequest = false,
                    headers = {
                        ["X-Original-Cookie"] = cookie
                    }
                })
                
                if not schedule_res or schedule_res.status ~= ngx.HTTP_OK then
                    ngx.log(ngx.ERR, "Failed to get schedule details. Status: ", schedule_res and schedule_res.status or "no response")
                    ngx.log(ngx.ERR, "Schedule response body: ", schedule_res and schedule_res.body or "no body")
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) -- 500
                end
                
                -- Parse schedule response
                local schedule, err = cjson.decode(schedule_res.body)
                if not schedule then
                    ngx.log(ngx.ERR, "Could not decode schedule JSON: ", err)
                    ngx.log(ngx.ERR, "Schedule response body: ", schedule_res.body)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) -- 500
                end
                
                ngx.log(ngx.ERR, "Schedule details - ID: ", schedule.id, ", team: ", schedule.team or "null")
                
                -- If schedule has no team, deny access (admins already allowed above)
                if not schedule.team then
                    ngx.log(ngx.ERR, "Access denied: Schedule has no team assigned. User: ", user.login)
                    ngx.exit(ngx.HTTP_FORBIDDEN) -- 403
                else
                    -- Check if user belongs to the same team as the schedule
                    local user_in_team = false
                    for _, team in ipairs(teams) do
                        ngx.log(ngx.ERR, "Checking user team: ", team.id, " vs schedule team: ", schedule.team)
                        if tostring(team.id) == tostring(schedule.team) then
                            user_in_team = true
                            ngx.log(ngx.ERR, "User is member of team: ", team.name, " (ID: ", team.id, ")")
                            break
                        end
                    end
                    
                    if not user_in_team then
                        ngx.log(ngx.ERR, "Access denied: User ", user.login, " is not member of schedule team ", schedule.team)
                        ngx.exit(ngx.HTTP_FORBIDDEN) -- 403
                    end
                    
                    ngx.log(ngx.ERR, "Access granted: User is member of schedule team")
                end
            else
                -- For other requests, deny access (admins already allowed above)
                ngx.log(ngx.ERR, "Access denied for non-admin user: ", user.login, " for original URI: ", original_uri)
                ngx.exit(ngx.HTTP_FORBIDDEN) -- 403
            end

            -- 8. If all rules pass, return 200 OK to Nginx's auth_request module.
            ngx.log(ngx.ERR, "Auth successful for user: ", user.login)
            ngx.exit(ngx.HTTP_OK)
        }
    }

    # Internal proxy location for making requests to Grafana API
    location = /_auth_proxy {
        internal;
        
        # Log the cookie being sent to Grafana
        access_by_lua_block {
            local cookie = ngx.var.http_x_original_cookie
            ngx.log(ngx.ERR, "_auth_proxy: Cookie from custom header: ", cookie or "none")
            ngx.log(ngx.ERR, "_auth_proxy: About to make request to Grafana with cookie: ", cookie or "none")
        }
        
        proxy_pass http://grafana:3000/api/user;
        proxy_set_header Host localhost:3000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Cookie $http_x_original_cookie;
        proxy_set_header Origin http://localhost:3000;
        proxy_set_header Referer http://localhost:3000/;
        
        # Don't pass the body for auth requests
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }

    # Internal proxy location for making requests to Grafana teams API
    location = /_teams_proxy {
        internal;
        
        # Log the cookie being sent to Grafana
        access_by_lua_block {
            local cookie = ngx.var.http_x_original_cookie
            ngx.log(ngx.ERR, "_teams_proxy: Cookie from custom header: ", cookie or "none")
            ngx.log(ngx.ERR, "_teams_proxy: About to make request to Grafana teams with cookie: ", cookie or "none")
        }
        
        proxy_pass http://grafana:3000/api/user/teams;
        proxy_set_header Host localhost:3000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Cookie $http_x_original_cookie;
        proxy_set_header Origin http://localhost:3000;
        proxy_set_header Referer http://localhost:3000/;
    }

    # Internal proxy location for making requests to Grafana teams API
    location = /_oncall_teams_proxy {
        internal;
        
        # Log the cookie being sent to Grafana
        access_by_lua_block {
            local cookie = ngx.var.http_x_original_cookie
            ngx.log(ngx.ERR, "_oncall_teams_proxy: Cookie from custom header: ", cookie or "none")
            ngx.log(ngx.ERR, "_oncall_teams_proxy: About to make request to Grafana teams with cookie: ", cookie or "none")
        }
        
        proxy_pass http://grafana:3000/api/plugins/grafana-oncall-app/resources/teams;
        proxy_set_header Host localhost:3000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Cookie $http_x_original_cookie;
        proxy_set_header Origin http://localhost:3000;
        proxy_set_header Referer http://localhost:3000/;
    }

    # Internal proxy location for making requests to OnCall API for schedule details
    location = /_oncall_schedule_proxy {
        internal;
        
        # Log the cookie and schedule ID being sent to OnCall API
        access_by_lua_block {
            local cookie = ngx.var.http_x_original_cookie
            local schedule_id = ngx.var.arg_schedule_id
            ngx.log(ngx.ERR, "_oncall_schedule_proxy: Cookie from custom header: ", cookie or "none")
            ngx.log(ngx.ERR, "_oncall_schedule_proxy: Schedule ID: ", schedule_id or "none")
            ngx.log(ngx.ERR, "_oncall_schedule_proxy: About to make request to OnCall API for schedule: ", schedule_id or "none")
        }
        
        proxy_pass http://grafana:3000/api/plugins/grafana-oncall-app/resources/schedules/$arg_schedule_id;
        proxy_set_header Host localhost:3000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Cookie $http_x_original_cookie;
        proxy_set_header Origin http://localhost:3000;
        proxy_set_header Referer http://localhost:3000/;
        
        # Don't pass the body for schedule lookup requests
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }
}
